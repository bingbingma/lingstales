{"version":3,"sources":["logo.svg","utils/API.js","components/carousel.js","components/navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API","getPages","axios","get","getPage","id","deletePage","delete","savePage","pageData","post","Carousel","state","pages","loadPages","then","res","_this","setState","data","catch","err","console","log","this","react_default","a","createElement","lib","height","width","autoPlay","autoPlaySpeed","dots","infinite","onSlideChange","map","image","src","imageUrl","React","Component","NavBar","style","headerStyle","background","color","textAlign","padding","App","className","navbar","carousel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sNCEzBC,EAAA,CAEbC,SAAU,WACR,OAAOC,IAAMC,IAAI,cAGnBC,QAAS,SAASC,GAChB,OAAOH,IAAMC,IAAI,aAAeE,IAGlCC,WAAY,SAASD,GACnB,OAAOH,IAAMK,OAAO,aAAeF,IAGrCG,SAAU,SAASC,GACjB,OAAOP,IAAMQ,KAAK,YAAaD,KC6BpBE,6MAxCbC,MAAQ,CACNC,MAAO,MAOTC,UAAY,WACVd,EAAIC,WACDc,KAAK,SAAAC,GAAG,OACPC,EAAKC,SAAS,CACZL,MAAOG,EAAIG,SAGdC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAV5BG,KAAKV,6CAeL,OADAQ,QAAQC,IAAIC,KAAKZ,MAAMC,OAErBY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,UAAU,EACVC,cAAe,IACfC,MAAM,EACNC,UAAU,EACVC,cAAe,kBAAMb,QAAQC,IAAI,mBAEhCC,KAAKZ,MAAMC,MAAMuB,IAAI,SAAAC,GAAK,OACzBZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKD,EAAME,aAElBd,EAAAC,EAAAC,cAAA,qBAnCaa,IAAMC,WCHvBC,mLAEJ,OACEjB,EAAAC,EAAAC,cAAA,UAAQgB,MAAOC,GACfnB,EAAAC,EAAAC,cAAA,0BAGAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,2BATiBa,IAAMC,WAerBG,EAAc,CAClBC,WAAY,UACZC,MAAO,OACPC,UAAW,OACXC,QAAS,QAQIN,ICJAO,0LAfX,OACExB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,cAGbzB,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,cAEAF,EAAAC,EAAAC,cAACyB,EAAD,eAVQX,cCEZY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7C,KAAK,SAAAiD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtD,QACfiD,UAAUC,cAAcO,WAK1B/C,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAkD,GACLhD,QAAQgD,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAAoB,OAAMH,GAAN,sBAENxB,EAwCX,SAAiCO,GAE/BqB,MAAMrB,GACH7C,KAAK,SAAAmE,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQjF,IAAI,gBAAgBkF,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMvE,KAAK,SAAAiD,GACjCA,EAAauB,aAAaxE,KAAK,WAC7BwC,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBxC,MAAM,WACLE,QAAQC,IACN,mEAzDAkE,CAAwB7B,GAHxBD,EAAgBC,MC7BxB8B","file":"static/js/main.7b38e107.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import axios from \"axios\";\n\nexport default {\n  // Gets all pages\n  getPages: function() {\n    return axios.get(\"/api/page\");\n  },\n  // Gets the page with the given id\n  getPage: function(id) {\n    return axios.get(\"/api/page/\" + id);\n  },\n  // Deletes the book with the given id\n  deletePage: function(id) {\n    return axios.delete(\"/api/page/\" + id);\n  },\n  // Saves a book to the database\n  savePage: function(pageData) {\n    return axios.post(\"/api/page\", pageData);\n  }\n};\n","import React from \"react\";\nimport { Glide } from \"react-glide\";\nimport \"react-glide/lib/reactGlide.css\";\nimport API from \"../utils/API\";\n\nclass Carousel extends React.Component {\n  state = {\n    pages: []\n  };\n\n  componentDidMount() {\n    this.loadPages();\n  }\n\n  loadPages = () => {\n    API.getPages()\n      .then(res =>\n        this.setState({\n          pages: res.data\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    console.log(this.state.pages);\n    return (\n      <div>\n        <Glide\n          height={400}\n          width={1000}\n          autoPlay={false}\n          autoPlaySpeed={2000}\n          dots={false}\n          infinite={true}\n          onSlideChange={() => console.log(\"slide changed\")}\n        >\n          {this.state.pages.map(image => (\n            <img src={image.imageUrl} />\n          ))}\n          <div />\n        </Glide>\n      </div>\n    );\n  }\n}\nexport default Carousel;\n","import React from \"react\";\n\nclass NavBar extends React.Component{\n  render(){\n  return (\n    <header style={headerStyle}>\n    <h1>\n      Ling's Tales\n    </h1>\n    <p>Home</p> \n    <p>Read</p>\n    <p>Amazon</p>\n    </header>\n  );\n}\n}\n\nconst headerStyle = {\n  background: \"#BE2625\",\n  color: \"#fff\",\n  textAlign: \"left\",\n  padding: \"10px\"\n};\n\n// const linkStyle = {\n//   color: \"#fff\",\n//   textDecoration: \"none\"\n// };\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Carousel from \"./components/carousel\";\nimport NavBar from \"./components/navbar\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to Ling's Tales</h2> */}\n          <NavBar />\n          <break />\n\n          <Carousel />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}